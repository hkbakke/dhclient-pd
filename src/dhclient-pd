#!/usr/bin/env python3

import argparse
import hashlib
import json
import logging
import subprocess
import sys
from functools import cached_property
from ipaddress import IPv6Address, IPv6Network, IPv6Interface
from typing import Iterator, Optional


INTERFACES_CONFIG = "/etc/dhclient-pd/interfaces.json"


LOGGER = logging.getLogger(__name__)


class PrefixError(Exception):
    pass


class Interface:
    def __init__(self, name: str):
        self.name = name

    @cached_property
    def _addrs(self) -> list[IPv6Interface]:
        addrs = []

        p = subprocess.run(
            ["ip", "-6", "-j", "addr", "show", self.name, "scope", "global"],
            check=True,
            capture_output=True,
        )

        for interface in json.loads(p.stdout):
            for addr in interface["addr_info"]:
                if addr.get("family") == "inet6":
                    addrs.append(IPv6Interface(f'{addr["local"]}/{addr["prefixlen"]}'))

        return addrs

    @property
    def addrs(self) -> list[IPv6Interface]:
        return self._addrs

    def add_addr(self, addr: IPv6Interface) -> None:
        if addr in self.addrs:
            LOGGER.info("Address %s is already added to %s", addr, self.name)
            return

        LOGGER.info("Adding address %s to %s", addr, self.name)
        subprocess.run(
            ["ip", "-6", "addr", "add", addr.with_prefixlen, "dev", self.name],
            check=True,
        )

        # Clear cache for _addrs to force a new lookup if needed
        if hasattr(self, "_addrs"):
            del self._addrs

    def remove_addr(self, addr: IPv6Interface) -> None:
        LOGGER.info("Removing address %s from %s", addr, self.name)
        subprocess.run(
            ["ip", "-6", "addr", "del", addr.with_prefixlen, "dev", self.name],
            check=True,
        )

        # Clear cache for _addrs to force a new lookup if needed
        if hasattr(self, "_addrs"):
            del self._addrs


class DelegatedPrefix:
    PREFIXLEN = 64

    def __init__(self, prefix: str):
        self.network = IPv6Network(prefix)
        self._assigned_prefixes: set[int] = set()

    def get_prefix(self, prefix_id: str, prefix_length: int) -> IPv6Network:
        prefix_index = int(prefix_id, 16)

        if prefix_index in self._assigned_prefixes:
            raise PrefixError(f"The prefix id {prefix_index:x} is already assigned")

        self._assigned_prefixes.add(prefix_index)
        prefix_address = self.network.network_address + int(
            IPv6Address(f"0:0:0:{prefix_index:x}::")
        )
        prefix_network = IPv6Network(f"{prefix_address}/{prefix_length}")

        if not prefix_network.subnet_of(self.network):
            raise PrefixError(
                f"The prefix id {prefix_index:x} does not fit within the delegated prefix"
            )

        return prefix_network

    def get_prefix_address(
        self, prefix: IPv6Network, interface_id: str
    ) -> IPv6Interface:
        addr = prefix.network_address + int(IPv6Address(interface_id))
        return IPv6Interface(f"{addr}/{prefix.prefixlen}")

    def get_prefix_addresses(
        self, prefix_id: str, prefix_length: int, interface_ids: list[str]
    ) -> Iterator[IPv6Interface]:
        prefix = self.get_prefix(prefix_id, prefix_length)
        for interface_id in interface_ids:
            yield self.get_prefix_address(prefix, interface_id)


class PrefixConfig:
    def __init__(
        self,
        name: str,
        prefix_id: str,
        prefix_length: Optional[int] = None,
        interface_ids: Optional[list[str]] = None,
    ):
        self.name = name
        self.prefix_id = prefix_id

        if prefix_length is None:
            self.prefix_length = 64
        else:
            self.prefix_length = prefix_length

        if interface_ids is None:
            self.interface_ids = ["::1"]
        else:
            self.interface_ids = interface_ids


def get_interfaces() -> Iterator[Interface]:
    p = subprocess.run(
        ["ip", "-6", "-j", "addr", "show"],
        check=True,
        capture_output=True,
    )

    for interface in json.loads(p.stdout):
        for addr in interface["addr_info"]:
            if addr["family"] == "inet6":
                yield Interface(interface["ifname"])
            break


def config_cmd(args):
    with open(args.config, "r", encoding="utf-8") as f:
        config = json.load(f)

    interfaces: dict[str, Interface] = {}

    for interface in get_interfaces():
        interfaces[interface.name] = interface

    if args.prefix:
        LOGGER.info("Delegated prefix: %s", args.prefix)
        prefix = DelegatedPrefix(args.prefix)
        addrs_added: set[str] = set()

        for item in config:
            prefix_cfg = PrefixConfig(**item)
            interface = interfaces[prefix_cfg.name]

            for addr in prefix.get_prefix_addresses(
                prefix_cfg.prefix_id,
                prefix_cfg.prefix_length,
                prefix_cfg.interface_ids,
            ):
                interface.add_addr(addr)
                addrs_added.add(str(addr))

        for _, interface in interfaces.items():
            for addr in interface.addrs:
                if str(addr) not in addrs_added and addr in prefix.network:
                    interface.remove_addr(addr)

    if args.old_prefix and args.old_prefix != args.prefix:
        LOGGER.info("Old prefix: %s", args.old_prefix)
        prefix = DelegatedPrefix(args.old_prefix)

        for _, interface in interfaces.items():
            for addr in interface.addrs:
                if addr in prefix.network:
                    interface.remove_addr(addr)


def show_cmd(args):
    with open(args.config, "r", encoding="utf-8") as f:
        config = json.load(f)
        json.dump(config, sys.stdout, indent=4)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-c",
        "--config",
        metavar="FILENAME",
        default=INTERFACES_CONFIG,
        help="interfaces config file",
    )
    subparsers = parser.add_subparsers()

    # config subcommand
    config_cmd_parser = subparsers.add_parser("config")
    config_cmd_parser.set_defaults(func=config_cmd)
    config_cmd_parser.add_argument(
        "-p",
        "--prefix",
        metavar="PREFIX",
        nargs="?",
        help="prefix to add",
    )
    config_cmd_parser.add_argument(
        "-o",
        "--old-prefix",
        metavar="PREFIX",
        nargs="?",
        help="prefix to remove",
    )

    # show subcommand
    show_cmd_parser = subparsers.add_parser("show")
    show_cmd_parser.set_defaults(func=show_cmd)
    args = parser.parse_args()

    LOGGER.setLevel(logging.INFO)
    console = logging.StreamHandler()
    LOGGER.addHandler(console)

    args.func(args)


if __name__ == "__main__":
    main()
